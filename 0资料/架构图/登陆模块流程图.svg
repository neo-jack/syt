<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1600 2200" width="1600" height="2200">
  <defs>
    <style>
      .title { font-family: 'Microsoft YaHei', Arial, sans-serif; font-size: 32px; font-weight: bold; text-anchor: middle; fill: #1a237e; dominant-baseline: central; }
      .subtitle { font-family: 'Microsoft YaHei', Arial, sans-serif; font-size: 18px; text-anchor: middle; fill: #424242; dominant-baseline: central; }
      .node-text { font-family: 'Microsoft YaHei', Arial, sans-serif; font-size: 16px; text-anchor: middle; fill: #333; dominant-baseline: central; font-weight: bold; }
      .desc-text { font-family: 'Microsoft YaHei', Arial, sans-serif; font-size: 13px; text-anchor: middle; fill: #555; dominant-baseline: central; }
      .label-text { font-family: 'Microsoft YaHei', Arial, sans-serif; font-size: 12px; fill: #666; dominant-baseline: central; font-weight: bold; }
      .code-text { font-family: 'Consolas', 'Monaco', monospace; font-size: 12px; fill: #2e7d32; text-anchor: middle; dominant-baseline: central; }
      .path-text { font-family: 'Microsoft YaHei', Arial, sans-serif; font-size: 11px; fill: #795548; text-anchor: middle; dominant-baseline: central; font-style: italic; }
      .api-text { font-family: 'Consolas', 'Monaco', monospace; font-size: 11px; fill: #1565c0; text-anchor: middle; dominant-baseline: central; }
      
      .start-node { fill: #e8eaf6; stroke: #3f51b5; stroke-width: 3; }
      .decision-node { fill: #fff3e0; stroke: #ff9800; stroke-width: 3; }
      .process-node { fill: #f3e5f5; stroke: #9c27b0; stroke-width: 3; }
      .success-node { fill: #e8f5e8; stroke: #4caf50; stroke-width: 3; }
      .error-node { fill: #ffebee; stroke: #f44336; stroke-width: 3; }
      .auth-node { fill: #e0f2f1; stroke: #009688; stroke-width: 3; }
      .api-node { fill: #e3f2fd; stroke: #2196f3; stroke-width: 3; }
      .storage-node { fill: #fce4ec; stroke: #e91e63; stroke-width: 3; }
      .route-node { fill: #f1f8e9; stroke: #689f38; stroke-width: 3; }
      
      .arrow { stroke: #424242; stroke-width: 2; fill: none; marker-end: url(#arrowhead); }
      .success-arrow { stroke: #4caf50; stroke-width: 3; fill: none; marker-end: url(#success-arrowhead); }
      .error-arrow { stroke: #f44336; stroke-width: 3; fill: none; marker-end: url(#error-arrowhead); }
      .auth-arrow { stroke: #009688; stroke-width: 2; fill: none; marker-end: url(#auth-arrowhead); }
      .dashed { stroke-dasharray: 8,4; }
    </style>
    
    <marker id="arrowhead" markerWidth="12" markerHeight="8" refX="11" refY="4" orient="auto" markerUnits="strokeWidth">
      <polygon points="0 0, 12 4, 0 8" fill="#424242"/>
    </marker>
    <marker id="success-arrowhead" markerWidth="12" markerHeight="8" refX="11" refY="4" orient="auto" markerUnits="strokeWidth">
      <polygon points="0 0, 12 4, 0 8" fill="#4caf50"/>
    </marker>
    <marker id="error-arrowhead" markerWidth="12" markerHeight="8" refX="11" refY="4" orient="auto" markerUnits="strokeWidth">
      <polygon points="0 0, 12 4, 0 8" fill="#f44336"/>
    </marker>
    <marker id="auth-arrowhead" markerWidth="12" markerHeight="8" refX="11" refY="4" orient="auto" markerUnits="strokeWidth">
      <polygon points="0 0, 12 4, 0 8" fill="#009688"/>
    </marker>
  </defs>
  
  <!-- 标题区域 -->
  <rect x="50" y="20" width="1500" height="100" rx="15" fill="#1a237e"/>
  <text x="800" y="55" class="title" fill="white">尚医通登录模块流程图</text>
  <text x="800" y="85" class="subtitle" fill="#e8eaf6">完整的用户认证与路由守卫流程架构</text>
  
  <!-- 1. 开始节点 -->
  <ellipse cx="800" cy="180" rx="120" ry="45" class="start-node"/>
  <text x="800" y="170" class="node-text">用户访问系统</text>
  <text x="800" y="185" class="desc-text">启动React应用程序</text>
  <text x="800" y="200" class="path-text">src/App.tsx</text>
  
  <!-- 2. withAuthorization检查 -->
  <rect x="650" y="280" width="300" height="100" rx="10" class="auth-node"/>
  <text x="800" y="315" class="node-text">路由守卫检查</text>
  <text x="800" y="330" class="desc-text">withAuthorization高阶组件</text>
  <text x="800" y="345" class="path-text">src/components/withAuthorization/</text>
  <text x="800" y="360" class="code-text">const { token, name } = useAppSelector(selectUser)</text>
  
  <!-- 3. Token存在性检查 -->
  <polygon points="700,420 900,420 950,470 900,520 700,520 650,470" class="decision-node"/>
  <text x="800" y="460" class="node-text">Token检查</text>
  <text x="800" y="475" class="desc-text">验证用户认证状态</text>
  <text x="800" y="490" class="code-text">if (token)</text>
  
  <!-- 左分支：无Token流程 -->
  <!-- 4. 重定向到登录页 -->
  <rect x="200" y="580" width="280" height="100" rx="10" class="error-node"/>
  <text x="340" y="615" class="node-text">重定向到登录页</text>
  <text x="340" y="630" class="desc-text">用户未认证，强制登录</text>
  <text x="340" y="645" class="path-text">src/pages/Login/index.tsx</text>
  <text x="340" y="660" class="code-text">navigate('/login')</text>
  
  <!-- 5. 渲染登录表单 -->
  <rect x="200" y="720" width="280" height="100" rx="10" class="process-node"/>
  <text x="340" y="755" class="node-text">渲染登录表单</text>
  <text x="340" y="770" class="desc-text">显示用户名密码输入框</text>
  <text x="340" y="785" class="path-text">Login组件Form表单</text>
  <text x="340" y="800" class="code-text">Form + Input + Button组件</text>
  
  <!-- 6. 表单验证 -->
  <rect x="200" y="860" width="280" height="100" rx="10" class="process-node"/>
  <text x="340" y="895" class="node-text">表单数据验证</text>
  <text x="340" y="910" class="desc-text">验证用户输入合法性</text>
  <text x="340" y="925" class="path-text">Antd Form验证规则</text>
  <text x="340" y="940" class="code-text">form.validateFields()</text>
  
  <!-- 7. 触发登录Action -->
  <rect x="200" y="1000" width="280" height="100" rx="10" class="api-node"/>
  <text x="340" y="1035" class="node-text">触发登录Action</text>
  <text x="340" y="1050" class="desc-text">Redux异步登录处理</text>
  <text x="340" y="1065" class="path-text">src/app/userSlice.ts</text>
  <text x="340" y="1080" class="code-text">dispatch(loginAsync(loginData))</text>
  
  <!-- 8. API请求 -->
  <rect x="180" y="1140" width="320" height="100" rx="10" class="api-node"/>
  <text x="340" y="1175" class="node-text">调用登录API接口</text>
  <text x="340" y="1190" class="desc-text">向后端发送认证请求</text>
  <text x="340" y="1205" class="path-text">src/api/user/index.ts</text>
  <text x="340" y="1220" class="api-text">POST /admin/acl/index/login</text>
  
  <!-- 9. 登录结果判断 -->
  <polygon points="260,1290 420,1290 470,1340 420,1390 260,1390 210,1340" class="decision-node"/>
  <text x="340" y="1330" class="node-text">登录结果</text>
  <text x="340" y="1345" class="desc-text">判断API响应状态</text>
  <text x="340" y="1360" class="code-text">response.code === 200</text>
  
  <!-- 10. 登录失败处理 -->
  <rect x="50" y="1450" width="220" height="100" rx="10" class="error-node"/>
  <text x="160" y="1485" class="node-text">登录失败</text>
  <text x="160" y="1500" class="desc-text">显示错误提示信息</text>
  <text x="160" y="1515" class="path-text">Antd Message组件</text>
  <text x="160" y="1530" class="code-text">message.error(msg)</text>
  
  <!-- 11. 获取Token -->
  <rect x="530" y="1450" width="220" height="100" rx="10" class="success-node"/>
  <text x="640" y="1485" class="node-text">获取Token</text>
  <text x="640" y="1500" class="desc-text">接收认证令牌</text>
  <text x="640" y="1515" class="path-text">API响应数据</text>
  <text x="640" y="1530" class="code-text">response.data.token</text>
  
  <!-- 12. 保存到Redux -->
  <rect x="520" y="1590" width="240" height="100" rx="10" class="storage-node"/>
  <text x="640" y="1625" class="node-text">保存到Redux Store</text>
  <text x="640" y="1640" class="desc-text">更新全局状态管理</text>
  <text x="640" y="1655" class="path-text">userSlice reducer</text>
  <text x="640" y="1670" class="code-text">state.token = payload.token</text>
  
  <!-- 13. 持久化存储 -->
  <rect x="500" y="1730" width="280" height="100" rx="10" class="storage-node"/>
  <text x="640" y="1765" class="node-text">持久化到本地存储</text>
  <text x="640" y="1780" class="desc-text">保存到浏览器存储</text>
  <text x="640" y="1795" class="path-text">localStorage API</text>
  <text x="640" y="1810" class="code-text">localStorage.setItem('token', token)</text>
  
  <!-- 14. 路由跳转 -->
  <rect x="480" y="1870" width="320" height="100" rx="10" class="route-node"/>
  <text x="640" y="1905" class="node-text">跳转到首页</text>
  <text x="640" y="1920" class="desc-text">登录成功后路由导航</text>
  <text x="640" y="1935" class="path-text">React Router Navigate</text>
  <text x="640" y="1950" class="code-text">navigate('/syt/dashboard')</text>
  
  <!-- 右分支：有Token流程 -->
  <!-- 15. Token验证 -->
  <rect x="1050" y="580" width="280" height="100" rx="10" class="auth-node"/>
  <text x="1190" y="615" class="node-text">Token有效性验证</text>
  <text x="1190" y="630" class="desc-text">检查认证令牌状态</text>
  <text x="1190" y="645" class="path-text">Redux Selector</text>
  <text x="1190" y="660" class="code-text">token !== ''</text>
  
  <!-- 16. 路径检查 -->
  <polygon points="1090,740 1290,740 1340,790 1290,840 1090,840 1040,790" class="decision-node"/>
  <text x="1190" y="780" class="node-text">当前路径检查</text>
  <text x="1190" y="795" class="desc-text">判断是否访问登录页</text>
  <text x="1190" y="810" class="code-text">pathname === '/login'</text>
  
  <!-- 17. 重定向到首页 -->
  <rect x="1420" y="580" width="280" height="100" rx="10" class="route-node"/>
  <text x="1560" y="615" class="node-text">重定向到首页</text>
  <text x="1560" y="630" class="desc-text">避免重复登录</text>
  <text x="1560" y="645" class="path-text">路由守卫逻辑</text>
  <text x="1560" y="660" class="code-text">navigate('/syt/dashboard')</text>
  
  <!-- 18. 用户信息检查 -->
  <polygon points="1090,900 1290,900 1340,950 1290,1000 1090,1000 1040,950" class="decision-node"/>
  <text x="1190" y="940" class="node-text">用户信息检查</text>
  <text x="1190" y="955" class="desc-text">验证用户详细信息</text>
  <text x="1190" y="970" class="code-text">name !== ''</text>
  
  <!-- 19. 渲染目标组件 -->
  <rect x="1420" y="900" width="280" height="100" rx="10" class="success-node"/>
  <text x="1560" y="935" class="node-text">渲染目标组件</text>
  <text x="1560" y="950" class="desc-text">正常页面访问</text>
  <text x="1560" y="965" class="path-text">受保护的路由组件</text>
  <text x="1560" y="980" class="code-text">return children</text>
  
  <!-- 20. 获取用户信息 -->
  <rect x="700" y="1060" width="300" height="100" rx="10" class="api-node"/>
  <text x="850" y="1095" class="node-text">获取用户详细信息</text>
  <text x="850" y="1110" class="desc-text">请求用户个人资料</text>
  <text x="850" y="1125" class="path-text">src/api/user/index.ts</text>
  <text x="850" y="1140" class="api-text">GET /admin/acl/index/info</text>
  
  <!-- 21. Loading状态 -->
  <rect x="720" y="1200" width="260" height="100" rx="10" class="process-node"/>
  <text x="850" y="1235" class="node-text">显示Loading状态</text>
  <text x="850" y="1250" class="desc-text">异步请求加载提示</text>
  <text x="850" y="1265" class="path-text">Loading组件</text>
  <text x="850" y="1280" class="code-text">Spin/Loading组件</text>
  
  <!-- 22. 更新用户信息 -->
  <rect x="700" y="1340" width="300" height="100" rx="10" class="storage-node"/>
  <text x="850" y="1375" class="node-text">更新用户信息</text>
  <text x="850" y="1390" class="desc-text">保存用户详细资料</text>
  <text x="850" y="1405" class="path-text">userSlice reducer</text>
  <text x="850" y="1420" class="code-text">state.name = payload.name</text>
  
  <!-- 主流程箭头 -->
  <line x1="800" y1="225" x2="800" y2="280" class="arrow"/>
  <line x1="800" y1="380" x2="800" y2="420" class="arrow"/>
  
  <!-- Token检查分支 -->
  <line x1="700" y1="470" x2="480" y2="580" class="error-arrow"/>
  <text x="590" y="525" class="label-text" fill="#f44336">无Token</text>
  
  <line x1="900" y1="470" x2="1100" y2="580" class="success-arrow"/>
  <text x="1000" y="525" class="label-text" fill="#4caf50">有Token</text>
  
  <!-- 左分支流程箭头 -->
  <line x1="340" y1="680" x2="340" y2="720" class="arrow"/>
  <line x1="340" y1="820" x2="340" y2="860" class="arrow"/>
  <line x1="340" y1="960" x2="340" y2="1000" class="arrow"/>
  <line x1="340" y1="1100" x2="340" y2="1140" class="arrow"/>
  <line x1="340" y1="1240" x2="340" y2="1290" class="arrow"/>
  
  <!-- 登录结果分支 -->
  <line x1="260" y1="1340" x2="160" y2="1450" class="error-arrow"/>
  <text x="210" y="1395" class="label-text" fill="#f44336">失败</text>
  
  <line x1="420" y1="1340" x2="620" y2="1450" class="success-arrow"/>
  <text x="520" y="1395" class="label-text" fill="#4caf50">成功</text>
  
  <!-- 成功登录流程 -->
  <line x1="640" y1="1550" x2="640" y2="1590" class="success-arrow"/>
  <line x1="640" y1="1690" x2="640" y2="1730" class="success-arrow"/>
  <line x1="640" y1="1830" x2="640" y2="1870" class="success-arrow"/>
  
  <!-- 右分支流程箭头 -->
  <line x1="1190" y1="680" x2="1190" y2="740" class="arrow"/>
  
  <!-- 登录页检查分支 -->
  <line x1="1340" y1="790" x2="1480" y2="680" class="success-arrow"/>
  <text x="1410" y="735" class="label-text" fill="#4caf50">是登录页</text>
  
  <line x1="1190" y1="840" x2="1190" y2="900" class="arrow"/>
  <text x="1250" y="870" class="label-text">非登录页</text>
  
  <!-- 用户信息检查分支 -->
  <line x1="1340" y1="950" x2="1480" y2="950" class="success-arrow"/>
  <text x="1410" y="935" class="label-text" fill="#4caf50">有信息</text>
  
  <line x1="1090" y1="950" x2="920" y2="1060" class="auth-arrow"/>
  <text x="1005" y="1005" class="label-text" fill="#009688">无信息</text>
  
  <!-- 获取用户信息流程 -->
  <line x1="850" y1="1160" x2="850" y2="1200" class="arrow"/>
  <line x1="850" y1="1300" x2="850" y2="1340" class="arrow"/>
  
  <!-- 完成后重新检查 -->
  <path d="M 1000 1380 L 1400 1380 L 1400 950 L 1420 950" class="success-arrow dashed"/>
  
  <!-- 错误重试循环 -->
  <path d="M 160 1550 L 160 2000 L 340 2000 L 340 960" class="error-arrow dashed"/>
  <text x="250" y="2020" class="label-text" fill="#f44336">重新登录</text>
  
  <!-- 成功后重新检查循环 -->
  <path d="M 640 1970 L 640 2050 L 1600 2050 L 1600 470 L 950 470" class="success-arrow dashed"/>
  <text x="1125" y="2070" class="label-text" fill="#4caf50">重新触发路由守卫检查</text>

</svg> 